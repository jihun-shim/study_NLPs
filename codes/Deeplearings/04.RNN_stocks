{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":7084494,"sourceType":"datasetVersion","datasetId":4081618}],"dockerImageVersionId":30840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## simple RNN\n- dataset : https://www.kaggle.com/datasets/iveeaten3223times/massive-yahoo-finance-dataset\n- 연속형(=시계열, 문장 등) 데이터 처리에 유리","metadata":{}},{"cell_type":"markdown","source":"## 데이터 관련","metadata":{}},{"cell_type":"code","source":"# 데이터 로드\nimport pandas as pd\n# df_stock = pd.read_csv('/kaggle/input/massive-yahoo-finance-dataset/stock_details_5_years.csv')\n# df_stock.head(3)\n\ndf_stock_all = pd.read_csv('/kaggle/input/massive-yahoo-finance-dataset/stock_details_5_years.csv')\ndf_stock_all.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:03.855376Z","iopub.execute_input":"2025-02-04T03:45:03.855659Z","iopub.status.idle":"2025-02-04T03:45:05.278439Z","shell.execute_reply.started":"2025-02-04T03:45:03.855635Z","shell.execute_reply":"2025-02-04T03:45:05.277562Z"}},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"                        Date        Open        High         Low       Close  \\\n0  2018-11-29 00:00:00-05:00   43.829761   43.863354   42.639594   43.083508   \n1  2018-11-29 00:00:00-05:00  104.769074  105.519257  103.534595  104.636131   \n2  2018-11-29 00:00:00-05:00   54.176498   55.007500   54.099998   54.729000   \n\n      Volume  Dividends  Stock Splits Company  \n0  167080000        0.0           0.0    AAPL  \n1   28123200        0.0           0.0    MSFT  \n2   31004000        0.0           0.0   GOOGL  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>43.829761</td>\n      <td>43.863354</td>\n      <td>42.639594</td>\n      <td>43.083508</td>\n      <td>167080000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>104.769074</td>\n      <td>105.519257</td>\n      <td>103.534595</td>\n      <td>104.636131</td>\n      <td>28123200</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>MSFT</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>54.176498</td>\n      <td>55.007500</td>\n      <td>54.099998</td>\n      <td>54.729000</td>\n      <td>31004000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>GOOGL</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"# 특정 회사(컴퍼니)만 시계열 가져오기 (나오게)\nselected_company = 'AAPL'\ndf_stock = df_stock_all[df_stock_all['Company'] == selected_company]\ndf_stock.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:05.279476Z","iopub.execute_input":"2025-02-04T03:45:05.279768Z","iopub.status.idle":"2025-02-04T03:45:05.341011Z","shell.execute_reply.started":"2025-02-04T03:45:05.279738Z","shell.execute_reply":"2025-02-04T03:45:05.340200Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"                           Date       Open       High        Low      Close  \\\n0     2018-11-29 00:00:00-05:00  43.829761  43.863354  42.639594  43.083508   \n458   2018-11-30 00:00:00-05:00  43.261071  43.270671  42.478826  42.850754   \n916   2018-12-03 00:00:00-05:00  44.261681  44.376858  43.481835  44.348064   \n1374  2018-12-04 00:00:00-05:00  43.419445  43.764977  42.296468  42.397247   \n1832  2018-12-06 00:00:00-05:00  41.214280  41.938938  40.892744  41.924541   \n\n         Volume  Dividends  Stock Splits Company  \n0     167080000        0.0           0.0    AAPL  \n458   158126000        0.0           0.0    AAPL  \n916   163210000        0.0           0.0    AAPL  \n1374  165377200        0.0           0.0    AAPL  \n1832  172393600        0.0           0.0    AAPL  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>43.829761</td>\n      <td>43.863354</td>\n      <td>42.639594</td>\n      <td>43.083508</td>\n      <td>167080000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>458</th>\n      <td>2018-11-30 00:00:00-05:00</td>\n      <td>43.261071</td>\n      <td>43.270671</td>\n      <td>42.478826</td>\n      <td>42.850754</td>\n      <td>158126000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>916</th>\n      <td>2018-12-03 00:00:00-05:00</td>\n      <td>44.261681</td>\n      <td>44.376858</td>\n      <td>43.481835</td>\n      <td>44.348064</td>\n      <td>163210000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1374</th>\n      <td>2018-12-04 00:00:00-05:00</td>\n      <td>43.419445</td>\n      <td>43.764977</td>\n      <td>42.296468</td>\n      <td>42.397247</td>\n      <td>165377200</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1832</th>\n      <td>2018-12-06 00:00:00-05:00</td>\n      <td>41.214280</td>\n      <td>41.938938</td>\n      <td>40.892744</td>\n      <td>41.924541</td>\n      <td>172393600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"markdown","source":"### 데이터 전처리","metadata":{}},{"cell_type":"code","source":"# 날짜를 datetime 변환\ndf_stock['Date'] = pd.to_datetime(df_stock['Date'], utc=True)\ndf_stock['Date'].dtype","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:05.341874Z","iopub.execute_input":"2025-02-04T03:45:05.342179Z","iopub.status.idle":"2025-02-04T03:45:05.372101Z","shell.execute_reply.started":"2025-02-04T03:45:05.342148Z","shell.execute_reply":"2025-02-04T03:45:05.371337Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-3-6faa62f0cc68>:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_stock['Date'] = pd.to_datetime(df_stock['Date'], utc=True)\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"datetime64[ns, UTC]"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# df_stock.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:05.374568Z","iopub.execute_input":"2025-02-04T03:45:05.374846Z","iopub.status.idle":"2025-02-04T03:45:05.378491Z","shell.execute_reply.started":"2025-02-04T03:45:05.374820Z","shell.execute_reply":"2025-02-04T03:45:05.377508Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# 스케일링\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_stock[['Open','High','Low','Close','Volume']] = scaler.fit_transform(df_stock[['Open','High','Low','Close','Volume']])\ndf_stock.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:05.379921Z","iopub.execute_input":"2025-02-04T03:45:05.380153Z","iopub.status.idle":"2025-02-04T03:45:05.412924Z","shell.execute_reply.started":"2025-02-04T03:45:05.380133Z","shell.execute_reply":"2025-02-04T03:45:05.412114Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-5-7eb35ecb155c>:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_stock[['Open','High','Low','Close','Volume']] = scaler.fit_transform(df_stock[['Open','High','Low','Close','Volume']])\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                         Date      Open      High       Low     Close  \\\n0   2018-11-29 05:00:00+00:00 -1.598199 -1.611253 -1.611061 -1.615618   \n458 2018-11-30 05:00:00+00:00 -1.610310 -1.623753 -1.614516 -1.620572   \n916 2018-12-03 05:00:00+00:00 -1.589000 -1.600423 -1.592958 -1.588704   \n\n       Volume  Dividends  Stock Splits Company  \n0    1.176835        0.0           0.0    AAPL  \n458  1.010309        0.0           0.0    AAPL  \n916  1.104861        0.0           0.0    AAPL  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-29 05:00:00+00:00</td>\n      <td>-1.598199</td>\n      <td>-1.611253</td>\n      <td>-1.611061</td>\n      <td>-1.615618</td>\n      <td>1.176835</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>458</th>\n      <td>2018-11-30 05:00:00+00:00</td>\n      <td>-1.610310</td>\n      <td>-1.623753</td>\n      <td>-1.614516</td>\n      <td>-1.620572</td>\n      <td>1.010309</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>916</th>\n      <td>2018-12-03 05:00:00+00:00</td>\n      <td>-1.589000</td>\n      <td>-1.600423</td>\n      <td>-1.592958</td>\n      <td>-1.588704</td>\n      <td>1.104861</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df_stock.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:05.413804Z","iopub.execute_input":"2025-02-04T03:45:05.414226Z","iopub.status.idle":"2025-02-04T03:45:05.420025Z","shell.execute_reply.started":"2025-02-04T03:45:05.414054Z","shell.execute_reply":"2025-02-04T03:45:05.418988Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(1258, 9)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# 시계열 데이터 생성\nimport numpy as np\nimport torch\n\nsequence_length = 5 # 5일 단위\n\nfrom tqdm import tqdm\n\n\ndef create_sequences(data, seq_length):\n    xs = []\n    ys = []\n    # for i in range(len(data) - seq_length):\n    for i in tqdm(range(len(data) - seq_length), desc = 'Generating Sequences'):\n        x = data[i:i+seq_length]\n        y = data[i+seq_length]\n        xs.append(x)\n        ys.append(y)\n    return np.array(xs), np.array(ys) # features, label\n\nfeatures, label = create_sequences(df_stock['Close'].values, sequence_length)\nfeatures.shape, label.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:46:04.790695Z","iopub.execute_input":"2025-02-04T03:46:04.791015Z","iopub.status.idle":"2025-02-04T03:46:04.803373Z","shell.execute_reply.started":"2025-02-04T03:46:04.790990Z","shell.execute_reply":"2025-02-04T03:46:04.802701Z"}},"outputs":[{"name":"stderr","text":"Generating Sequences: 100%|██████████| 1253/1253 [00:00<00:00, 959026.08it/s]\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"((1253, 5), (1253,))"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"features[:3]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:46:25.070490Z","iopub.execute_input":"2025-02-04T03:46:25.070796Z","iopub.status.idle":"2025-02-04T03:46:25.076197Z","shell.execute_reply.started":"2025-02-04T03:46:25.070771Z","shell.execute_reply":"2025-02-04T03:46:25.075289Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"array([[-1.61561817, -1.62057201, -1.58870387, -1.63022425, -1.64028513],\n       [-1.62057201, -1.58870387, -1.63022425, -1.64028513, -1.67210203],\n       [-1.58870387, -1.63022425, -1.64028513, -1.67210203, -1.66643324]])"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"# 텐서 변환\nfeatures_tensor = torch.tensor(features, dtype = torch.float32).unsqueeze(-1)\nlabel_tensor = torch.tensor(label, dtype = torch.float32).unsqueeze(-1)\nfeatures_tensor.shape, label_tensor.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:46:25.077427Z","iopub.execute_input":"2025-02-04T03:46:25.077722Z","iopub.status.idle":"2025-02-04T03:46:25.121472Z","shell.execute_reply.started":"2025-02-04T03:46:25.077689Z","shell.execute_reply":"2025-02-04T03:46:25.120839Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(torch.Size([1253, 5, 1]), torch.Size([1253, 1]))"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"## 모델관련","metadata":{}},{"cell_type":"code","source":"# RNN 모델 정의\nimport torch.nn as nn\n\nclass SimpleRNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(SimpleRNN, self).__init__()\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n    \n    def forward(self, x):\n        h0 = torch.zeros(1, x.size(0), hidden_size)\n        out, _ = self.rnn(x, h0)\n        out = self.fc(out[:, -1, :])\n        return out\n\ninput_size = 1 # row 단위 갯수\nhidden_size = 5 # 은닉층 갯수\noutput_size = 1 \n\nmodel = SimpleRNN(input_size, hidden_size, output_size)\nmodel","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:46:25.122823Z","iopub.execute_input":"2025-02-04T03:46:25.123017Z","iopub.status.idle":"2025-02-04T03:46:25.140046Z","shell.execute_reply.started":"2025-02-04T03:46:25.122999Z","shell.execute_reply":"2025-02-04T03:46:25.139395Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"SimpleRNN(\n  (rnn): RNN(1, 5, batch_first=True)\n  (fc): Linear(in_features=5, out_features=1, bias=True)\n)"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"# 모델 학습\nimport torch.optim as optim\n\ncriterion = nn.MSELoss()\noptimizer = optim.AdamW(model.parameters(), lr = 0.01)\n\nepochs = 100\n\nfor epoch in tqdm(range(epochs), desc = 'learning Model'):\n    model.train()\n    outputs = model(features_tensor)\n    optimizer.zero_grad()\n    loss = criterion(outputs, label_tensor) # error율 확인\n    loss.backward()\n    optimizer.step()\n\n    if (epoch+1) % 10 == 0: # 10회에 1번 출력\n        print(f'Epoch [{epoch+1} / {epochs}]. Loss : {loss.item():.5f}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:46:25.141041Z","iopub.execute_input":"2025-02-04T03:46:25.141270Z","iopub.status.idle":"2025-02-04T03:46:27.532342Z","shell.execute_reply.started":"2025-02-04T03:46:25.141250Z","shell.execute_reply":"2025-02-04T03:46:27.531253Z"}},"outputs":[{"name":"stderr","text":"learning Model:  81%|████████  | 81/100 [00:00<00:00, 249.10it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch [10 / 100]. Loss : 0.23826\nEpoch [20 / 100]. Loss : 0.02847\nEpoch [30 / 100]. Loss : 0.03117\nEpoch [40 / 100]. Loss : 0.02149\nEpoch [50 / 100]. Loss : 0.01338\nEpoch [60 / 100]. Loss : 0.01150\nEpoch [70 / 100]. Loss : 0.00877\nEpoch [80 / 100]. Loss : 0.00722\nEpoch [90 / 100]. Loss : 0.00627\n","output_type":"stream"},{"name":"stderr","text":"learning Model: 100%|██████████| 100/100 [00:00<00:00, 215.49it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch [100 / 100]. Loss : 0.00558\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"model.state_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:46:27.533096Z","iopub.execute_input":"2025-02-04T03:46:27.533507Z","iopub.status.idle":"2025-02-04T03:46:27.555474Z","shell.execute_reply.started":"2025-02-04T03:46:27.533481Z","shell.execute_reply":"2025-02-04T03:46:27.554654Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"OrderedDict([('rnn.weight_ih_l0',\n              tensor([[-0.2403],\n                      [ 0.5026],\n                      [ 0.5664],\n                      [-0.4173],\n                      [-0.5272]])),\n             ('rnn.weight_hh_l0',\n              tensor([[-0.1870, -0.1328, -0.1987,  0.4740,  0.1635],\n                      [-0.3045, -0.0621,  0.0131,  0.3095, -0.0315],\n                      [ 0.2624, -0.0267,  0.4245, -0.3666,  0.3246],\n                      [-0.2272, -0.5333,  0.2885,  0.3441, -0.2442],\n                      [ 0.2805,  0.0405,  0.0213, -0.0785,  0.0368]])),\n             ('rnn.bias_ih_l0',\n              tensor([-0.2311,  0.1890,  0.1726,  0.0305,  0.2643])),\n             ('rnn.bias_hh_l0',\n              tensor([-0.1265, -0.0574, -0.0595,  0.2144,  0.2018])),\n             ('fc.weight',\n              tensor([[-0.2521,  0.3373,  0.5440, -0.5822, -0.4957]])),\n             ('fc.bias', tensor([0.0690]))])"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"## 평가 관련","metadata":{}},{"cell_type":"code","source":"model.eval()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:47:04.906966Z","iopub.execute_input":"2025-02-04T03:47:04.907246Z","iopub.status.idle":"2025-02-04T03:47:04.912269Z","shell.execute_reply.started":"2025-02-04T03:47:04.907224Z","shell.execute_reply":"2025-02-04T03:47:04.911386Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"SimpleRNN(\n  (rnn): RNN(1, 5, batch_first=True)\n  (fc): Linear(in_features=5, out_features=1, bias=True)\n)"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"with torch.no_grad():\n    predicted = model(features_tensor[:5])\npredicted, label_tensor[:5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:48:40.651570Z","iopub.execute_input":"2025-02-04T03:48:40.651862Z","iopub.status.idle":"2025-02-04T03:48:40.659428Z","shell.execute_reply.started":"2025-02-04T03:48:40.651840Z","shell.execute_reply":"2025-02-04T03:48:40.658406Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(tensor([[-1.5294],\n         [-1.5451],\n         [-1.5449],\n         [-1.5468],\n         [-1.5461]]),\n tensor([[-1.6721],\n         [-1.6664],\n         [-1.6714],\n         [-1.6690],\n         [-1.6595]]))"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}